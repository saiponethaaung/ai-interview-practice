// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum JobStatus {
  OPEN
  CLOSED
}

enum JobAnswerType {
  QUESTIONS
  COVER_LETTER
  RESUME
}

enum FileStatus {
  UPLOADED
  PROCESSED
  ERROR
  PENDING
}

enum FileType {
  RESUME
  CV
  COVER_LETTER
}

enum InterviewType {
  TEXT
  AUDIO
  VIDEO
}

enum InterviewStage {
  GENERAL
  TECHNICAL
  HR
}

enum QuestionType {
  BEHAVIORAL
  TECHNICAL
  SITUATIONAL
  PERSONAL
  COMPANY_SPECIFIC
  ROLE_SPECIFIC
  MIXED
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

// model User {
//   id String @id @default(uuid(7))

//   email    String @unique
//   password String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("user")
// }

model File {
  id String @id @default(uuid(7))

  name         String
  filename     String
  size         Int
  mime         String
  json         Json?
  type         FileType
  status       FileStatus @default(PENDING)
  errorMessage String?    @map("error_message")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobs Job[]

  @@map("file")
}

model Job {
  id String @id @default(uuid(7))

  title        String
  company      String?
  description  String
  link         String?
  skills       Json?
  resumeFileId String? @map("resume_file_id")
  resumeFile   File?   @relation(fields: [resumeFileId], references: [id])

  status JobStatus @default(OPEN)

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  jobAnswers     JobAnswer[]
  mockInterviews MockInterview[]

  @@map("job")
}

model JobAnswer {
  id String @id @default(uuid(7))

  jobId String @map("job_id")
  job   Job    @relation(fields: [jobId], references: [id])

  type     JobAnswerType @map("type")
  question String?
  content  Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("job_answer")
}

model MockInterview {
  id String @id @default(uuid(7))

  jobId String @map("job_id")
  job   Job    @relation(fields: [jobId], references: [id])

  type         InterviewType   @map("type")
  stage        InterviewStage  @map("stage")
  questionType QuestionType    @map("question_type")
  difficulty   DifficultyLevel @map("difficulty")
  isArchived   Boolean         @default(false) @map("is_archived")
  globalPrompt String?         @map("global_prompt")

  archivedAt DateTime? @map("archived_at")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  // sessions  MockInterviewSession[]

  @@map("mock_interview")
}

// model MockInterviewSession {
//   id String @id @default(uuid(7))

//   mockInterviewId String        @map("mock_interview_id")
//   mockInterview   MockInterview @relation(fields: [mockInterviewId], references: [id])

//   createdAt DateTime                      @default(now())
//   updatedAt DateTime                      @updatedAt
//   contents  MockInterviewSessionContent[]

//   @@map("mock_interview_question")
// }

// model MockInterviewSessionContent {
//   id String @id @default(uuid(7))

//   mockInterviewSessionId String               @map("mock_interview_session_id")
//   mockInterviewSession   MockInterviewSession @relation(fields: [mockInterviewSessionId], references: [id])

//   isQuestion  String  @map("is_question")
//   isCompleted Boolean @default(false) @map("is_completed")
//   content String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("mock_interview_session_content")
// }
