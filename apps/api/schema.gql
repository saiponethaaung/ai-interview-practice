# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AskQuestionJobAnswerRequest {
  jobId: String!
  question: String!
}

type ChatMessage {
  content: String!
  role: String!
}

input CreateFileRequest {
  filename: String!
  mime: String!
  name: String!
  size: Float!
  type: String!
}

type CreateFileResponse {
  file: FileResponse!
  url: String!
}

input CreateJobRequest {
  company: String!
  description: String
  link: String!
  resumeFileId: String!
  title: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type FilePaginatedResponse {
  data: [FileResponse!]!
  pagination: PaginationResponse!
}

type FileResponse {
  createdAt: DateTime!
  errorMessage: String
  filename: String!
  id: String!
  mime: String!
  name: String!
  resume: ResumeResponse
  size: Float!
  status: String!
  type: String!
  updatedAt: DateTime!
  url: String!
}

input GenerateCoverLetterRequest {
  jobId: String!
}

input GetFilesRequest {
  limit: Float
  name: String
  page: Float
}

input GetJobAnswersRequest {
  jobId: String!
}

input GetJobRequest {
  id: String!
}

input GetJobsRequest {
  limit: Float
  page: Float
  title: String
}

type JobAnswerResponse {
  content: JobContent!
  createdAt: DateTime!
  id: String!
  jobId: String!
  question: String
  type: String!
  updatedAt: DateTime!
}

type JobContent {
  chats: [ChatMessage!]!
  content: String!
}

type JobResponse {
  company: String
  createdAt: DateTime!
  description: String
  id: String!
  link: String!
  skills: [Skill!]!
  status: String!
  title: String!
  updatedAt: DateTime!
}

type Mutation {
  askQuestion(input: AskQuestionJobAnswerRequest!): JobAnswerResponse!
  createJob(input: CreateJobRequest!): JobResponse!
  createUploadFile(createFileRequest: CreateFileRequest!): CreateFileResponse!
  generateCoverLetter(input: GenerateCoverLetterRequest!): JobAnswerResponse!
}

type PaginationResponse {
  limit: Float!
  page: Float!
  total: Float!
  totalPages: Float!
}

type Query {
  getFiles(getFilesRequest: GetFilesRequest!): FilePaginatedResponse!
  getJobAnswers(input: GetJobAnswersRequest!): [JobAnswerResponse!]!
  job(GetJobRequest: GetJobRequest!): JobResponse
  jobs(GetJobsRequest: GetJobsRequest!): [JobResponse!]!
}

type ResumeEducation {
  degree: String
  description: String
  endDate: String
  fieldOfStudy: String
  institution: String
  startDate: String
}

type ResumeExperience {
  company: String
  description: String
  endDate: String
  position: String
  startDate: String
}

type ResumeResponse {
  address: String
  certifications: [String!]
  education: [ResumeEducation!]
  email: String
  experience: [ResumeExperience!]
  firstName: String
  fullName: String
  languages: [String!]
  lastName: String
  middleName: String
  phoneNumber: String
  skills: [String!]
  summary: String
}

type Skill {
  analysis: String
  description: String!
  mandatory: Boolean!
  name: String!
  technical: Boolean!
}